﻿@model PotatoPortail.Models.PlanCadre
@using PotatoPortail.Models
@{
    ViewBag.Titre = "PDF " + Model.titreCours;
    <title>@ViewBag.Titre</title>
    Layout = null;
    bool rowspanIndicationPedago = false;
    int nbCompetence = Model.PlanCadreCompetence.Count();
    int planCadrPrealableHold = 0;
    ViewBag.Nom = Model.titreCours;
}
<style>


    table, th, td {
        border-collapse: collapse;
        font-size: 18px;
        border: 1px solid black;
    }


    table {
        /*page-break-before: avoid;*/
        width: 100%;
        margin-top: 25px;
    }

    tr {
        page-break-before: auto;
        page-break-inside: avoid;
        page-break-after: auto;
    }

    td {
        page-break-inside: avoid;
        page-break-before: auto;
        vertical-align: top;
    }

    thead {
        display: table-header-group;
        font-weight: bold;
    }

    tfoot { display: table-footer-group }

    div { page-break-after: auto }

    .divtop {
        width: 100%;
        font-size: 55px;
    }

    .pdf {
        font-family: Calibri;
        width: 100%;
    }

    .entete {
        font-size: 25px;
        font-weight: bold;
    }

    .entete-left {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        width: 50%;
        float: left;
        margin: 0;
    }

    .entete-right {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        width: 50%;
        float: right;
        margin: 0;
    }

    .inner-left {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        float: left;
        margin: 0;
    }

    .inner-right {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        float: left;
        margin-left: 10px;
    }

    .inner2-left {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        float: right;
        margin-left: 10px;
    }

    .inner2-right {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        float: right;
        margin: 0;
    }

    .critere-left {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        float: left;
        margin: 0;
        width: 4%;
        margin-right: 15px;
    }

    .critere-right {
        display: inline;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        margin: 0;
        float: left;
        width: 90%;
    }


    .corps { padding-top: 25px; }

    .line-prealable {
        margin-top: 5px;
        margin-bottom: 5px;
    }

    #clear { clear: both; }
</style>
<div class="pdf">
@Html.Partial("~/Views/static/header.cshtml", (string) ViewBag.Nom)
<!-- barre top -->
<div class="divtop">
    @Html.DisplayFor(x => Model.Programme.nom)@*nom programme*@
    <br/>
    @Html.DisplayFor(x => Model.Programme.DevisMinistere.specialisation)@*devis specialisation*@
</div>
<!-- début de l'entête -->
<div class="entete">
    <div class="entete-left">
        <br/>
        <div class="inner-left">
            Titre du cours :
            <br/>
            Pondération :
        </div>
        <div class="inner-right">
            @Html.DisplayFor(x => Model.titreCours)@*titre cours*@
            <br/>
            @Html.DisplayFor(x => Model.nbHeureTheorie) - @Html.DisplayFor(x => Model.nbHeurePratique) - @Html.DisplayFor(x => Model.nbHeureDevoir)
        </div>
    </div>
    <div class="entete-right">
        <br/>
        <div class="inner2-left">
            @Html.DisplayFor(x => Model.numeroCours)
            <br/>
            @Html.DisplayFor(x => Model.Programme.DevisMinistere.discipline)@*code programme devis*@.@Html.DisplayFor(x => Model.Programme.DevisMinistere.codeSpecialisation)
        </div>
        <div class="inner2-right">
            Numéro du cours :
            <br/>
            Programme :

        </div>
    </div>
</div>
<div id="clear"></div>

<!-- début du corps du plan cadre-->
<div class="corps">
<table style="margin-bottom: 25px">
    <thead>
    <tr>
        <td style="width: 20%;">
            Objectif - Énoncé des compétences
        </td>
        <td style="width: 45%;">
            Standard - Contexte de réalisation
        </td>
        <td>
            Indication pédagogiques, s'il y a lieu
        </td>
    </tr>
    </thead>
    <tbody>
    @foreach (PlanCadreCompetence a in Model.PlanCadreCompetence)
    {
        <tr>
            <td>
                @Html.DisplayFor(x => a.EnonceCompetence.Description) (@Html.DisplayFor(x => a.EnonceCompetence.CodeCompetence))
                <br/>
                <br/>
                @Html.DisplayFor(x => a.PonderationEnHeure) heures
            </td>
            <td>
                <ul>
                    @foreach (ContexteRealisation c in a.EnonceCompetence.ContexteRealisation)
                    {
                        <li>@Html.DisplayFor(x => c.Description)</li>
                    }
                </ul>
            </td>
            @if (rowspanIndicationPedago != true)
            {
                <td rowspan=@Html.Raw(nbCompetence)>
                    @if (ViewData["listPcPrealableA"] != null)
                    {
                        foreach (PlanCadre pc in (List<PlanCadre>) ViewData["listPcPrealableA"])
                        {
                            foreach (PlanCadrePrealable prealable in pc.PlanCadrePrealable)
                            {
                                if (planCadrPrealableHold != prealable.IdPlanCadre)
                                {
                                    if (prealable.IdStatut == 2)
                                    {
                                        <div class="prealableA">
                                            <div class="prealable-left">
                                                <div>Préalable absolu à:</div>
                                            </div>
                                            <div class="prealable-right">
                                                <div class="line-prealable">@Html.DisplayFor(x => pc.TitreCours) @Html.DisplayFor(x => pc.NumeroCours)</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        if (prealable.IdStatut == 1)
                                        {
                                            <div class="prealableA">
                                                <div class="prealable-left">
                                                    <div>Préalable Relatif à:</div>
                                                </div>
                                                <div class="prealable-right">
                                                    <div class="line-prealable">@Html.DisplayFor(x => pc.TitreCours) @Html.DisplayFor(x => pc.NumeroCours)</div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    planCadrPrealableHold = prealable.IdPlanCadre;
                                }
                            }
                        }
                    }
                    <div class="clearfix"></div>
                    @foreach (var prealable in a.PlanCadre.PlanCadrePrealable)
                    {
                        if (prealable.IdStatut == 2)
                        {
                            <div class="prealableA">
                                <div class="prealable-left">
                                    <div>Préalable absolu :</div>
                                </div>
                                <div class="prealable-right">
                                    <div class="line-prealable">@Html.DisplayFor(x => prealable.PlanCadre.TitreCours) @Html.Raw(" (")@Html.DisplayFor(x => prealable.PlanCadre.NumeroCours)@Html.Raw(")")</div>
                                </div>
                            </div>
                        }
                        else
                        {
                            if (prealable.IdStatut == 1)
                            {
                                <div class="prealableA">
                                    <div class="prealable-left">
                                        <div>Préalable relatif :</div>
                                    </div>
                                    <div class="prealable-right">
                                        <div class="line-prealable">@Html.DisplayFor(x => prealable.PlanCadre.TitreCours) @Html.Raw(" (")@Html.DisplayFor(x => prealable.PlanCadre.NumeroCours)@Html.Raw(")")</div>
                                    </div>
                                </div>
                            }
                        }
                    }

                    @Html.DisplayFor(x => Model.indicationPedago)
                </td>
                rowspanIndicationPedago = true;
            }
        </tr>
    }
    </tbody>
</table>
@foreach (PlanCadreCompetence cadreCompetence in Model.PlanCadreCompetence)
{
    <!-- Affichage en boucle des tableau des ennoncer compétence-->

    <div style="margin-top: 50px;">
        <table>
            <thead>
            <tr>
                <td colspan="4">
                    @Html.DisplayFor(x => cadreCompetence.EnonceCompetence.Description) (@Html.DisplayFor(x => cadreCompetence.EnonceCompetence.CodeCompetence))
                </td>
            </tr>
            <tr>
                <td>
                    Les éléments de compétence
                </td>
                <td>
                    Critères de performance
                </td>
                <td>
                    Éléments de connaissances
                </td>
                <td width="25%">
                    Activités d'apprentissage suggérées
                </td>
            </tr>
            </thead>
            <tbody>
            @for (int i = 0; i < cadreCompetence.PlanCadre.PlanCadreCompetence.Count; i++)
            {
                var planCadreCompetence = cadreCompetence.PlanCadre.PlanCadreCompetence.ElementAt(i);
                var elementCompetence = planCadreCompetence.ElementCompetence;

                <tr>
                    <td style="width: 15%">
                        <ol start="@elementCompetence.numero">
                            <li>@Html.DisplayFor(m => elementCompetence.description)</li>
                        </ol>
                    </td>
                    <td style="width: 30%">
                        <ol>
                            @foreach (var criterePerformance in planCadreCompetence.ElementCompetence.CriterePerformance)
                            {
                                <li>@Html.DisplayFor(m => criterePerformance.description)</li>
                            }
                        </ol>
                    </td>
                    @{
                        bool isPreviousUsingSameConnaissance = false;
                        if (i > 0)
                        {
                            var previousPlanCadreCompetence = planCadreCompetence.PlanCadreCompetence.ElementAt(i - 1);
                            isPreviousUsingSameConnaissance = previousPlanCadreCompetence.ElementConnaissance.idElementConnaissance == planCadreCompetence.ElementConnaissance.idElementConnaissance;
                        }

                        bool isThereConnaissanceFollowing = false;
                        int connaissanceRowspan = 1;
                        for (int j = i + 1; j < planCadreCompetence.PlanCadreCompetence.Count(); j++)
                        {
                            var followingPlanCadreCompetence = planCadreCompetence.PlanCadreCompetence.ElementAt(j);
                            if (followingPlanCadreCompetence.ElementConnaissance.idElementConnaissance == planCadreCompetence.ElementConnaissance.idElementConnaissance)
                            {
                                isThereConnaissanceFollowing = true;
                                connaissanceRowspan++;
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    @if (!isPreviousUsingSameConnaissance)
                    {
                        if (isThereConnaissanceFollowing)
                        {
                            <td rowspan="@connaissanceRowspan" class="rich-cell">@Html.Raw(planCadreCompetence.ElementConnaissance.description)</td>
                        }
                        else
                        {
                            <td class="rich-cell">@Html.Raw(planCadreCompetence.ElementConnaissance.description)</td>
                        }
                    }
                    @{
                        bool isPreviousUsingSameActivite = false;
                        if (i > 0)
                        {
                            var previousPlanCadreCompetence = planCadreCompetence.PlanCadreCompetence.ElementAt(i - 1);
                            isPreviousUsingSameActivite = previousPlanCadreCompetence.ElementConnaissance.idActiviteApprentissage == planCadreCompetence.ElementConnaissance.idActiviteApprentissage;
                        }

                        bool isThereActiviteFollowing = false;
                        int activiteRowspan = 1;
                        for (int j = i + 1; j < planCadreCompetence.PlanCadreCompetence.Count(); j++)
                        {
                            var followingPlanCadreCompetence = planCadreCompetence.PlanCadreCompetence.ElementAt(j);
                            if (followingPlanCadreCompetence.ElementConnaissance.idActiviteApprentissage == planCadreCompetence.ElementConnaissance.idActiviteApprentissage)
                            {
                                isThereActiviteFollowing = true;
                                activiteRowspan++;
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    @if (!isPreviousUsingSameActivite)
                    {
                        if (isThereActiviteFollowing)
                        {
                            <td rowspan="@activiteRowspan" class="rich-cell">@Html.Raw(planCadreCompetence.ElementConnaissance.ActiviteApprentissage.description)</td>
                        }
                        else
                        {
                            <td class="rich-cell">@Html.Raw(planCadreCompetence.ElementConnaissance.ActiviteApprentissage.description)</td>
                        }
                    }
                </tr>
            }
        </table>
    </div>
}
<table>
    <thead>
    <tr>
        <td>
            Environement physique
        </td>
        <td>
            Ressources didactiques suggérées
        </td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td width="45%">
            @Html.Raw(Model.environnementPhys)
        </td>
        <td>
            @Html.Raw(Model.ressource)
        </td>
    </tr>
    </tbody>
</table>
</div>
</div>